{"version":3,"file":"static/js/212.15de75cd.chunk.js","mappings":"yRAgCA,EA9ByB,SAAC,GAEnB,IAAD,IADJA,MAASC,EACL,EADKA,aAAcC,EACnB,EADmBA,MAAOC,EAC1B,EAD0BA,aAAcC,EACxC,EADwCA,SAAUC,EAClD,EADkDA,OAAQC,EAC1D,EAD0DA,YAExDC,EAAc,IAAIC,KAAKP,GAE7B,OACE,4BACE,gBACEQ,IACEH,EAAW,yCAC2BA,GAClCI,EAENC,IAAI,UACJ,YAAW,WAEb,wBAAKT,KACL,0CAAkBK,EAAYK,yBAC9B,oCAAYT,EAAZ,UACA,+BACGE,QADH,IACGA,OADH,EACGA,EAAQQ,KAAI,SAACC,GAAD,OACX,wBAAmBA,EAAKC,MAAfD,EAAKE,GADH,OAKf,sCAAcZ,OAGnB,ECmBD,EA5CqB,WAAO,IAAD,IACzB,GAA0Ba,EAAAA,EAAAA,UAAS,IAAnC,eAAOjB,EAAP,KAAckB,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAc3D,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,8GAEHC,EAAAA,EAAAA,IAAgBV,GAFb,OAEhBW,EAFgB,OAGtBZ,EAASY,GAHa,gDAKtBC,QAAQC,IAAI,KAAMC,SALI,yDAAH,qDAQvBL,GACD,GAAE,CAACT,KAGF,4BACE,SAAC,KAAD,CAAMe,GAAIX,EAAoBY,QAA9B,+BAEA,SAAC,EAAD,CAAkBnC,MAAOA,KAEzB,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMkC,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,EAAAE,SAAD,CAAUC,UAAU,6CAApB,UACE,SAAC,KAAD,QAIP,C,yLC7CKC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAHb,SAOeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAA2BC,EAA3B,+BAAiC,GAAIC,EAArC,+BAA8C,CAAC,EAA/C,SACyBP,EAASQ,IAAIF,EAAKC,GAD3C,cACQE,EADR,yBAESA,EAASjB,MAFlB,mEAKO,SAAekB,IAAtB,4CAAO,OAAP,oBAAO,uGACEL,EAAY,uBADd,kEAIA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,0FACEP,EAAY,sBAAD,OAAuBO,KADpC,kEAIA,SAAerB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BV,GAA/B,0FACEwB,EAAY,SAAD,OAAUxB,KADvB,kEAIA,SAAegC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BhC,GAA/B,0FACIwB,EAAY,SAAD,OAAUxB,EAAV,cADf,kEAIE,SAAeiC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BjC,GAA/B,0FACEwB,EAAY,SAAD,OAAUxB,EAAV,cADb,kE","sources":["components/MovieDetailsCard/MovieDetailsCard.jsx","pages/MovieDetails.jsx","services/api.js"],"sourcesContent":["import no_photo from 'Images/no_poster.jpg';\n\nconst MovieDetailsCard = ({\n  movie: { release_date, title, vote_average, overview, genres, poster_path },\n}) => {\n  const releaseData = new Date(release_date);\n  \n  return (\n    <div>\n      <img\n        src={\n          poster_path\n            ? `https://image.tmdb.org/t/p/w300${poster_path}`\n            : no_photo\n        }\n        alt=\"{title}\"\n        min-width={'100px'}\n      />\n      <h2>{title}</h2>\n      <p>Release date: {releaseData.toLocaleDateString()}</p>\n      <p>Rating: {vote_average}/10</p>\n      <ul>\n        {genres?.map((item) => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>\n\n      <p>Overview: {overview}</p>\n    </div>\n  );\n};\n\nexport default MovieDetailsCard;\n","import { Suspense, useRef, useEffect, useState } from 'react';\nimport { Outlet, Link, useLocation, useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'services/api';\nimport MovieDetailsCard from 'components/MovieDetailsCard/MovieDetailsCard';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState([]);\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/Movies');\n\n  useEffect(() => {\n    const movieDetailsCards = async () => {\n      try {\n        const data = await getMovieDetails(movieId);\n        setMovie(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    movieDetailsCards();\n  }, [movieId]);\n\n  return (\n    <div>\n      <Link to={backLinkLocationRef.current}>Back to products</Link>\n\n      <MovieDetailsCard movie={movie} />\n\n      <h3>Additional information</h3>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"crew\">Crew</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading page...</div>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '651df2f834e523ae20eba08e8b55c0c2',\n  },\n});\n\nasync function fetchMovies(url = '', config = {}) {\n  const response = await instance.get(url, config);\n  return response.data;\n}\n\nexport async function getTrending() {\n  return fetchMovies(`trending/movie/day`);\n}\n\nexport async function searchMovies(query) {\n  return fetchMovies(`search/movie?query=${query}`);\n}\n\nexport async function getMovieDetails(movieId) {\n  return fetchMovies(`movie/${movieId}`);\n}\n\nexport async function getMovieCredits(movieId) {\n    return fetchMovies(`movie/${movieId}/credits`);\n  }\n\n  export async function getMovieReviews(movieId) {\n    return fetchMovies(`movie/${movieId}/reviews`);\n  }\n\n\n\n  "],"names":["movie","release_date","title","vote_average","overview","genres","poster_path","releaseData","Date","src","no_photo","alt","toLocaleDateString","map","item","name","id","useState","setMovie","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","movieDetailsCards","getMovieDetails","data","console","log","message","to","current","Suspense","fallback","instance","axios","baseURL","params","api_key","fetchMovies","url","config","get","response","getTrending","searchMovies","query","getMovieCredits","getMovieReviews"],"sourceRoot":""}